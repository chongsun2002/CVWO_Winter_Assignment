// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO Posts (PostID, Title, Content, Topic, LastModified, IsEdited, Upvotes, Downvotes, UserID, Name)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING postid, title, content, topic, lastmodified, isedited, upvotes, downvotes, userid, name
`

type CreatePostParams struct {
	Postid       uuid.UUID
	Title        string
	Content      sql.NullString
	Topic        sql.NullString
	Lastmodified time.Time
	Isedited     bool
	Upvotes      int32
	Downvotes    int32
	Userid       uuid.NullUUID
	Name         sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Postid,
		arg.Title,
		arg.Content,
		arg.Topic,
		arg.Lastmodified,
		arg.Isedited,
		arg.Upvotes,
		arg.Downvotes,
		arg.Userid,
		arg.Name,
	)
	var i Post
	err := row.Scan(
		&i.Postid,
		&i.Title,
		&i.Content,
		&i.Topic,
		&i.Lastmodified,
		&i.Isedited,
		&i.Upvotes,
		&i.Downvotes,
		&i.Userid,
		&i.Name,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :execrows

UPDATE Posts
SET Content = 'Deleted'
WHERE UserID = $2 and PostID = $1
`

type DeletePostParams struct {
	Postid uuid.UUID
	Userid uuid.NullUUID
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePost, arg.Postid, arg.Userid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const editPost = `-- name: EditPost :execrows

UPDATE Posts
SET Content = $3, IsEdited = true, LastModified=$4
WHERE UserID = $2 and PostID = $1
`

type EditPostParams struct {
	Postid       uuid.UUID
	Userid       uuid.NullUUID
	Content      sql.NullString
	Lastmodified time.Time
}

func (q *Queries) EditPost(ctx context.Context, arg EditPostParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, editPost,
		arg.Postid,
		arg.Userid,
		arg.Content,
		arg.Lastmodified,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

type PostNotNull struct {
	Postid       uuid.UUID
	Title        string
	Content      string
	Topic        string
	Lastmodified time.Time
	Isedited     bool
	Upvotes      int32
	Downvotes    int32
	Userid       uuid.UUID
	Name         string 
}


const getPostByID = `-- name: GetPostByID :one

SELECT postid, title, content, topic, lastmodified, isedited, upvotes, downvotes, userid, name FROM Posts 
WHERE PostID = $1
`

func (q *Queries) GetPostByID(ctx context.Context, postid uuid.UUID) (PostNotNull, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, postid)
	var i PostNotNull
	var content, topic, name sql.NullString
	var user uuid.NullUUID
	err := row.Scan(
		&i.Postid,
		&i.Title,
		&content,
		&topic,
		&i.Lastmodified,
		&i.Isedited,
		&i.Upvotes,
		&i.Downvotes,
		&user,
		&name,
	)
	if content.Valid == true {
		i.Content = content.String
	} else {
		i.Content = ""
	}
	if topic.Valid == true {
		i.Topic = topic.String
	} else {
		i.Topic = ""
	}
	if name.Valid == true {
		i.Name = name.String
	} else {
		i.Name = ""
	}
	if user.Valid == true {
		i.Userid = user.UUID
	} else {
		i.Userid = uuid.UUID{}
	}
	return i, err
}

const getPosts = `-- name: GetPosts :many

SELECT postid, title, content, topic, lastmodified, isedited, upvotes, downvotes, userid, name FROM Posts
WHERE (Topic = $1 OR $1 IS NULL)
OFFSET $2
LIMIT $3
`


type GetPostsParams struct {
	Topic  sql.NullString
	Offset int32
	Limit  int32
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]PostNotNull, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Topic, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostNotNull
	for rows.Next() {
		var i PostNotNull
		var content, topic, name sql.NullString
		var user uuid.NullUUID
		if err := rows.Scan(
			&i.Postid,
			&i.Title,
			&content,
			&topic,
			&i.Lastmodified,
			&i.Isedited,
			&i.Upvotes,
			&i.Downvotes,
			&user,
			&name,
		); err != nil {
			return nil, err
		}
		if content.Valid == true {
			i.Content = content.String
		} else {
			i.Content = ""
		}
		if topic.Valid == true {
			i.Topic = topic.String
		} else {
			i.Topic = ""
		}
		if name.Valid == true {
			i.Name = name.String
		} else {
			i.Name = ""
		}
		if user.Valid == true {
			i.Userid = user.UUID
		} else {
			i.Userid = uuid.UUID{}
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
