// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: comments.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: createComment :one
INSERT INTO Comments (CommentID, Content, LastModified, IsEdited, Upvotes, Downvotes, UserID, PostID)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING commentid, content, lastmodified, isedited, upvotes, downvotes, userid, postid
`

type createCommentParams struct {
	Commentid    uuid.UUID
	Content      sql.NullString
	Lastmodified time.Time
	Isedited     bool
	Upvotes      int32
	Downvotes    int32
	Userid       uuid.NullUUID
	Postid       uuid.NullUUID
}

func (q *Queries) createComment(ctx context.Context, arg createCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.Commentid,
		arg.Content,
		arg.Lastmodified,
		arg.Isedited,
		arg.Upvotes,
		arg.Downvotes,
		arg.Userid,
		arg.Postid,
	)
	var i Comment
	err := row.Scan(
		&i.Commentid,
		&i.Content,
		&i.Lastmodified,
		&i.Isedited,
		&i.Upvotes,
		&i.Downvotes,
		&i.Userid,
		&i.Postid,
	)
	return i, err
}

const deleteComment = `-- name: deleteComment :exec

UPDATE Comments
SET Content = "Deleted"
WHERE UserID = $2 and CommentID = $1
`

type deleteCommentParams struct {
	Commentid uuid.UUID
	Userid    uuid.NullUUID
}

func (q *Queries) deleteComment(ctx context.Context, arg deleteCommentParams) error {
	_, err := q.db.ExecContext(ctx, deleteComment, arg.Commentid, arg.Userid)
	return err
}

const editComment = `-- name: editComment :exec

UPDATE Comments
SET Content = $3, IsEdited = true
WHERE UserID = $2 and CommentID = $1
`

type editCommentParams struct {
	Commentid uuid.UUID
	Userid    uuid.NullUUID
	Content   sql.NullString
}

func (q *Queries) editComment(ctx context.Context, arg editCommentParams) error {
	_, err := q.db.ExecContext(ctx, editComment, arg.Commentid, arg.Userid, arg.Content)
	return err
}

const getComments = `-- name: getComments :many

SELECT commentid, content, lastmodified, isedited, upvotes, downvotes, userid, postid FROM Comments 
WHERE PostID = $1
`

func (q *Queries) getComments(ctx context.Context, postid uuid.NullUUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments, postid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.Commentid,
			&i.Content,
			&i.Lastmodified,
			&i.Isedited,
			&i.Upvotes,
			&i.Downvotes,
			&i.Userid,
			&i.Postid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
